#lang racket
(require plot)
(require (for-syntax syntax/parse))
(require math/special-functions)

;; Cumulative distribution function for standard normal distribution
(define (cdf x)
  (/ (+ 1 (erf (/ x (sqrt 2)))) 2))

;; Black-Scholes formula for call options
(define (black-scholes-call S K T r sigma)
  (let* ([d1 (/ (+ (log (/ S K)) (* (+ r (/ (expt sigma 2) 2)) T))
                (* sigma (sqrt T)))]
         [d2 (- d1 (* sigma (sqrt T)))]
         [Nd1 (cdf d1)]
         [Nd2 (cdf d2)])
    (- (* S Nd1) (* K (exp (* (- r) T)) Nd2))))

;; Black-Scholes formula for put options
(define (black-scholes-put S K T r sigma)
  (let* ([d1 (/ (+ (log (/ S K)) (* (+ r (/ (expt sigma 2) 2)) T))
                (* sigma (sqrt T)))]
         [d2 (- d1 (* sigma (sqrt T)))]
         [Nd1 (cdf d1)]
         [Nd2 (cdf d2)])
    (- (* K (exp (* (- r) T)) (- 1 Nd2)) (* S (- 1 Nd1)))))

;; Calculate option premium at any point in time
(define (calculate-premium strike price time-to-expiration risk-free-rate volatility type)
  (if (eq? type 'call)
      (black-scholes-call price strike time-to-expiration risk-free-rate volatility)
      (black-scholes-put price strike time-to-expiration risk-free-rate volatility)))

;; Enhanced option function that handles time-to-expiration
(define (graph-strategy strike original-premium quantity type action original-time-to-expiration risk-free-rate volatility)
  (lambda (x [time-left original-time-to-expiration])
    (if (eq? x 'get-strike)
        strike
        (if (eq? x 'get-premium)
            original-premium
            (cond 
              ;; At expiration (time-left = 0), use the traditional payoff 
              [(= time-left 0)
               (let* ([expiration-payoff
                       (cond
                         [(eq? type 'call) (max 0 (- x strike))] 
                         [(eq? type 'put)  (max 0 (- strike x))])]
                      [adjusted-payoff (* quantity (- expiration-payoff original-premium))]
                      [final-payoff (if (eq? action 'buy)
                                        adjusted-payoff
                                        (- adjusted-payoff))])
                 final-payoff)]
              ;; Before expiration, calculate BS value minus original premium
              [else
               (let* ([current-premium (calculate-premium strike x time-left risk-free-rate volatility type)]
                      [value-change (- current-premium original-premium)]
                      [adjusted-value (* quantity value-change)]
                      [final-value (if (eq? action 'buy)
                                       adjusted-value
                                       (- adjusted-value))])
                 final-value)])))))

(define-syntax (define-option stx)
  (syntax-parse stx
    [(_ name:id
        #:action action:id
        #:type (~or call:id put:id)
        #:quantity quantity:expr 
        #:strike strike:expr 
        #:current-price price:expr
        #:expiration expiration:expr
        #:risk-free-rate rate:expr
        #:volatility vol:expr)
     (unless (or (eq? (syntax-e #'action) 'buy)
                 (eq? (syntax-e #'action) 'sell))
       (raise-syntax-error #f "Expected #:action to be either 'buy' or 'sell'" #'action))
     
     (let ([action (if (eq? (syntax-e #'action) 'buy) #''buy #''sell)]
           [type (if (attribute call) #''call #''put)])
        
       #`(define name
           (let* ([strike-val strike] 
                  [premium
                   (calculate-premium strike-val price expiration rate vol
                                      #,type)]
                  [strategy
                   (graph-strategy strike-val premium quantity #,type
                                   #,action expiration rate vol)])
             strategy)))]))

;; Define syntax for creating a strategy with an arbitrary number of options
(define-syntax-rule (define-option-strategy name option ...)
  (define (name [time-left #f]) 
    (let ([options (list option ...)])
      (graph-strategy-multi options time-left))))

;; Function to graph multiple options together with time-to-expiration parameter
(define (graph-strategy-multi options [time-left #f])
  (define strikes (map (lambda (option-fn) 
                         (option-fn 'get-strike)) 
                       options))
  (define min-price (apply min strikes))
  (define max-price (apply max strikes))
  (define price-range (- max-price min-price))
  (define horizontal-margins (* price-range 0.2))
  
  (define x-min (- min-price horizontal-margins))
  (define x-max (+ max-price horizontal-margins))
  
  (define (payoff x)
    (apply + (map (lambda (option-fn) 
                    (if time-left
                        (option-fn x time-left)
                        (option-fn x))) 
                  options)))

  (define sample-points (range x-min x-max (/ price-range 20)))
  (define y-values (map payoff sample-points))
  (define y-min (apply min y-values))
  (define y-max (apply max y-values))
  (define y-range (max 1 (- y-max y-min)))  ; Ensure at least some range
  (define y-margin (* y-range 0.1))
  
  (define title (if time-left
                    (format "Option Strategy Value (Time to Expiration: ~a years)" time-left)
                    "Option Strategy Payoff at Expiration"))
  
  (plot (function payoff x-min x-max)
        #:title title
        #:y-min (- y-min y-margin)
        #:y-max (+ y-max y-margin)
        #:x-label "Underlying Price"
        #:y-label "Profit/Loss"))

;; Function to compare strategy at different time points
(define (compare-over-time strategy time-points)
  ;; Extract options from the strategy by calling it
  (define options 
    (let-syntax ([get-options
                  (syntax-rules ()
                    [(_ strategy-name)
                     (let ([options-list (first (second (syntax-e #'strategy-name)))])
                       (map (lambda (opt) (eval opt)) options-list))])])
      ;; For simplicity, we'll just use fixed bounds based on the original options
      (list call-buy-1 call-sell-2 put-buy-1)))
  
  (define strikes (map (lambda (option) (option 'get-strike)) options))
  (define min-strike (apply min strikes))
  (define max-strike (apply max strikes))
  (define avg-strike (/ (+ min-strike max-strike) 2))
  (define price-range (max 10 (* 0.5 (+ min-strike max-strike))))
  
  (define x-min (max 1 (- avg-strike (* 0.3 price-range))))
  (define x-max (+ avg-strike (* 0.3 price-range)))
  (define x-step (/ price-range 40))
  
  ;; Get the strategy function
  (define strategy-fn (strategy))
  
  ;; Create functions for each time point
  (define time-functions 
    (map (lambda (t) 
           (lambda (x) (strategy-fn x t)))
         time-points))
  
  ;; Calculate y values for all functions across the price range
  (define sample-points (range x-min x-max x-step))
  (define all-y-values
    (apply append
           (map (lambda (f) 
                  (filter real? (map f sample-points)))
                time-functions)))
  
  ;; Determine overall y-bounds
  (define y-min (if (empty? all-y-values) -10 (apply min all-y-values)))
  (define y-max (if (empty? all-y-values) 10 (apply max all-y-values)))
  (define y-range (max 1 (- y-max y-min)))  ; Ensure at least some range
  (define y-margin (* y-range 0.1))
  
  ;; Create plot functions with colors and labels
  (define colors (list "red" "blue" "green" "purple" "orange" "brown"))
  
  (define lines
    (for/list ([t (in-list time-points)]
               [color (in-list colors)])
      (function (lambda (x) (strategy-fn x t))
                x-min
                x-max
                #:color color
                #:label (if (= t 0)
                            "At Expiration"
                            (format "~a years to expiration" t)))))
  
  (parameterize ([plot-legend-anchor 'top-right])
    (plot lines
          #:title "Option Strategy Value Over Time"
          #:x-label "Underlying Price"
          #:y-label "Profit/Loss"
          #:y-min (- y-min y-margin)
          #:y-max (+ y-max y-margin))))

;; Example Usage:
;; Buying a call option with a strike price of $100
(define-option call-buy-1
  #:action buy
  #:type call
  #:quantity 1
  #:strike 100
  #:current-price 104
  #:expiration 0.1
  #:risk-free-rate 0.05
  #:volatility 0.2)

;; Selling a call option with a strike price of $105
(define-option call-sell-2
  #:action sell
  #:type call
  #:quantity 1
  #:strike 105
  #:current-price 104
  #:expiration 0.1
  #:risk-free-rate 0.05
  #:volatility 0.2)

;; Buying a put option with a strike price of $95
(define-option put-buy-1
  #:action buy
  #:type put
  #:quantity 1
  #:strike 95
  #:current-price 101
  #:expiration 0.1
  #:risk-free-rate 0.05
  #:volatility 0.2)

;; Simple Call
(define-option-strategy simple-call
  call-buy-1)

;; Simple Short Call
(define-option-strategy simple-short-call
  call-sell-2)

;; Debit Spread
(define-option-strategy call-debit-spread
  call-buy-1
  call-sell-2)

;; Straddle
(define-option-strategy straddle
  call-buy-1
  put-buy-1)

;; Show single time slice
(simple-call 0.09)  ; Shows value 1 day before expiration (0.1 - 1/365)

;; Define a helper function that uses reasonable fixed bounds for time comparison
(define (plot-over-time strategy times)
  (define strategy-fn (strategy))
  
  (define x-min 80)  ;; Adjust these values based on your strike prices
  (define x-max 120) ;; Typically around 20% below/above the average strike
  
  (define colors (list "red" "blue" "green" "purple" "orange" "brown"))
  
  (define lines
    (for/list ([t (in-list times)]
               [color (in-list colors)])
      (function (lambda (x) (strategy-fn x t))
                x-min
                x-max
                #:color color
                #:label (if (= t 0)
                            "At Expiration"
                            (format "~a years to expiration" t)))))
  
  (parameterize ([plot-legend-anchor 'top-right])
    (plot lines
          #:title "Option Strategy Value Over Time"
          #:x-label "Underlying Price"
          #:y-label "Profit/Loss")))

;; Compare the same strategy at different points in time using the simpler approach
(plot-over-time simple-call (list 0 0.02 0.05 0.08 0.1))
(plot-over-time call-debit-spread (list 0 0.02 0.05 0.08 0.1))
(plot-over-time straddle (list 0 0.02 0.05 0.08 0.1))
